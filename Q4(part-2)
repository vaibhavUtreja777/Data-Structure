#include <iostream>
using namespace std;

const int MAX_SIZE = 100; // Define maximum size of the stack

class Stack {
private:
    int top; // Top of the stack
    int arr[MAX_SIZE]; // Array to store stack elements

public:
    Stack() : top(-1) {} // Constructor to initialize the top of stack

    bool isEmpty() {
        return top == -1;
    }

    bool isFull() {
        return top == MAX_SIZE - 1;
    }

    void push(int val) {
        if (isFull()) {
            cout << "Stack Overflow\n";
            return;
        }
        arr[++top] = val;
    }

    int pop() {
        if (isEmpty()) {
            cout << "Stack Underflow\n";
            return -1; // Error value for underflow condition
        }
        return arr[top--];
    }

    int peek() {
        if (isEmpty()) {
            cout << "Stack is empty\n";
            return -1; // Error value for empty stack
        }
        return arr[top];
    }
};

int evaluatePostfix(string exp) {
    Stack stack;
    for (char &c : exp) {
        if (isdigit(c)) {
            stack.push(c - '0');
        } else {
            int val1 = stack.pop();
            int val2 = stack.pop();

            switch (c) {
                case '+':
                    stack.push(val2 + val1);
                    break;
                case '-':
                    stack.push(val2 - val1);
                    break;
                case '*':
                    stack.push(val2 * val1);
                    break;
                case '/':
                    stack.push(val2 / val1);
                    break;
            }
        }
    }
    return stack.pop();
}

int evaluatePrefix(string exp) {
    Stack stack;
    for (int i = exp.size() - 1; i >= 0; i--) {
        if (isdigit(exp[i])) {
            stack.push(exp[i] - '0');
        } else {
            int val1 = stack.pop();
            int val2 = stack.pop();

            switch (exp[i]) {
                case '+':
                    stack.push(val1 + val2);
                    break;
                case '-':
                    stack.push(val1 - val2);
                    break;
                case '*':
                    stack.push(val1 * val2);
                    break;
                case '/':
                    stack.push(val1 / val2);
                    break;
            }
        }
    }
    return stack.pop();
}

int main() {
    string postfixExp = "234*+";
    string prefixExp = "+*23";

    cout << "Result of postfix expression evaluation: " << evaluatePostfix(postfixExp) << endl;
    cout << "Result of prefix expression evaluation: " << evaluatePrefix(prefixExp) << endl;

    return 0;
}
