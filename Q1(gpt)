#include <iostream>
using namespace std;

class Node {
public:
    int data;
    Node* next;

    Node(int value) {
        data = value;
        next = nullptr;
    }
};

class SinglyLinkedList {
private:
    Node* head;

public:
    SinglyLinkedList() {
        head = nullptr;
    }

    void insertAtBeginning(int value) {
        Node* newNode = new Node(value);
        newNode->next = head;
        head = newNode;
    }

    void insertAtPosition(int value, int position) {
        if (position <= 0) {
            cout << "Invalid position\n";
            return;
        }

        Node* newNode = new Node(value);
        if (position == 1) {
            newNode->next = head;
            head = newNode;
            return;
        }

        Node* temp = head;
        for (int i = 1; i < position - 1 && temp != nullptr; i++) {
            temp = temp->next;
        }

        if (temp == nullptr) {
            cout << "Position out of range\n";
        } else {
            newNode->next = temp->next;
            temp->next = newNode;
        }
    }

    void removeFromBeginning() {
        if (head == nullptr) {
            cout << "List is empty\n";
            return;
        }

        Node* temp = head;
        head = head->next;
        delete temp;
    }

    void removeFromPosition(int position) {
        if (position <= 0 || head == nullptr) {
            cout << "Invalid position or list is empty\n";
            return;
        }

        if (position == 1) {
            Node* temp = head;
            head = head->next;
            delete temp;
            return;
        }

        Node* temp = head;
        Node* prev = nullptr;
        for (int i = 1; i < position && temp != nullptr; i++) {
            prev = temp;
            temp = temp->next;
        }

        if (temp == nullptr) {
            cout << "Position out of range\n";
        } else {
            prev->next = temp->next;
            delete temp;
        }
    }

    Node* search(int value) {
        Node* temp = head;
        while (temp != nullptr) {
            if (temp->data == value) {
                return temp;
            }
            temp = temp->next;
        }
        return nullptr;
    }

    void display() {
        Node* temp = head;
        while (temp != nullptr) {
            cout << temp->data << " ";
            temp = temp->next;
        }
        cout << endl;
    }
};

int main() {
    SinglyLinkedList list;

    list.insertAtBeginning(5);
    list.insertAtBeginning(10);
    list.insertAtPosition(15, 2);
    list.display(); // Output: 10 15 5

    list.removeFromBeginning();
    list.display(); // Output: 15 5

    list.removeFromPosition(2);
    list.display(); // Output: 15

    Node* found = list.search(15);
    if (found != nullptr) {
        cout << "Element found: " << found->data << endl; // Output: Element found: 15
    } else {
        cout << "Element not found\n";
    }

    return 0;
}
