#include <iostream>
using namespace std;

const int MAX_SIZE = 100; // Define maximum size of the queue

class Queue {
private:
    int front, rear;
    int arr[MAX_SIZE];

public:
    Queue() : front(-1), rear(-1) {} // Constructor to initialize front and rear

    bool isEmpty() {
        return (front == -1 && rear == -1);
    }

    bool isFull() {
        return (rear + 1) % MAX_SIZE == front;
    }

    void enqueue(int val) {
        if (isFull()) {
            cout << "Queue is full\n";
            return;
        } else if (isEmpty()) {
            front = rear = 0;
        } else {
            rear = (rear + 1) % MAX_SIZE;
        }
        arr[rear] = val;
    }

    int dequeue() {
        if (isEmpty()) {
            cout << "Queue is empty\n";
            return -1; // Error value for empty queue
        } else if (front == rear) {
            int val = arr[front];
            front = rear = -1;
            return val;
        } else {
            int val = arr[front];
            front = (front + 1) % MAX_SIZE;
            return val;
        }
    }

    int peek() {
        if (isEmpty()) {
            cout << "Queue is empty\n";
            return -1; // Error value for empty queue
        }
        return arr[front];
    }
};
int main() {
    Queue q;

    q.enqueue(5);
    q.enqueue(10);
    q.enqueue(15);

    cout << "Front element: " << q.peek() << endl; // Output: Front element: 5

    cout << "Dequeue: " << q.dequeue() << endl; // Output: Dequeue: 5
    cout << "Front element after dequeue: " << q.peek() << endl; // Output: Front element after dequeue: 10

    q.enqueue(20);

    cout << "Dequeue: " << q.dequeue() << endl; // Output: Dequeue: 10
    cout << "Dequeue: " << q.dequeue() << endl; // Output: Dequeue: 15
    cout << "Dequeue: " << q.dequeue() << endl; // Output: Dequeue: 20

    cout << "Dequeue from an empty queue: " << q.dequeue() << endl; // Output: Queue is empty, Dequeue: -1

    return 0;
}
